===============
= DESCRIPTION =
===============

This is a hand-written assembly implementation of single block AES-128
encryption for the emulated MSP430 microcontroller at microcorruption.com.

It will encrypt a single block (16 bytes) of plaintext using a 128-bit (16 byte)
key, then print a representation of the state for the entire encryption process
to the console.  (This state representation is inspired by Appendix B of FIPS
Publication 197.)

The build process has only been tested on Ubuntu 14.04 with the binutils-msp430
and gcc-msp430 packages.

-- Richard Godbee <richard@godbee.net> / 2015-09-28


=========
= FILES =
=========

aes128-encrypt:
    An ELF executable generated by assembling and linking aes128-encrypt.s.

aes128-encrypt.hex:
    MSP430 machine code generated by dumping the .text and .rodata sections of
    aes128-encrypt.  (This is what is actually loaded into the emulated MSP430's
    memory.)

aes128-encrypt.lst:
    A mixed machine code/assembly code listing of aes128-encrypt's .text
    section, plus a symbol table and hex dump of its .rodata section.

aes128-encrypt.s:
    The aes128-encrypt program's MSP430 assembler source code.

loader.txt:
    A sequence of commands for the microcorruption.com Debugger Console that
    deposits a small loader program into memory and runs it.

Makefile:
    A GNU Makefile for the project.

README:
    The file you're reading now.


=======================
= THEORY OF OPERATION =
=======================

The microcorruption.com Debugger Console is used to load a small loader program
by directly modifying words in memory.  It then sets the program counter
register appropriately and starts the CPU in order to run the loader.

The loader reads the "real" aes128-encrypt program from the console, deposits
the program into memory starting at address 0x4400, and jumps to address 0x4400
to begin the program's execution.

The aes128-encrypt program reads two 16 byte strings from the console (the
plaintext and the key), performs the encryption, and prints a representation of
the encryption process's entire state to the console.  It then shuts down the
emulated MSP430.


==============
= HOW TO RUN =
==============

Start the microcorruption.com MSP430 emulator:

 1. Go to https://microcorruption.com/ in a web browser.

 2. Login with a valid username and password.

 3. Choose the Tutorial level.

 4. Click the "I know what I'm doing -- just let me go!" link, then click the
    "okay" button in the Manual overlay window.

Deposit the loader program into memory, run it, and load the aes128-encrypt
program into memory:

 5. Copy the contents of the provided "loader.txt" file and paste it into the
    textbox in the Debugger Console pane.  (Hint: If you're using OS X, you can
    type "make pb-loader" to copy the contents of "loader.txt" to the
    clipboard.)  Press Enter to execute the string of commands.

 6. An "IO interrupt triggered" overlay window will appear.  Check the "Check
    here if entering hex encoded input." checkbox.

 7. Copy the contents of the provided "aes128-encrypt.hex" file and paste it
    into the textbox in the "IO interrupt triggered" overlay window.  (Hint: If
    you're using OS X, you can type "make pb-program" to copy the contents of
    "aes128-encrypt.hex" to the clipboard.)

 8. Click the "send" button in the "IO interrupt triggered" overlay window.

Run the aes128-encrypt program:

 9. In the Debugger Console pane's textbox, press "c" and then Enter to start
    executing the aes128-encrypt program.

Input the plaintext and key:

10. An "IO interrupt triggered" overlay window will appear, and the console will
    display "plaintext (16 bytes)?"  Enter 16 bytes of plaintext.  If the "Check
    here if entering hex encoded input." checkbox is checked, you will need to
    enter 32 hex digits.

11. Click the "send" button in the "IO interrupt triggered" overlay window.

12. In the Debugger Console pane's textbox, press "c" and then Enter to continue
    program execution.

13. An "IO interrupt triggered" overlay window will appear, and the console will
    display "key (16 bytes)?"  Enter 16 bytes for the key.  If the "Check here
    if entering hex encoded input." checkbox is checked, you will need to enter
    32 hex digits.

14. Click the "send" button in the "IO interrupt triggered" overlay window.

15. In the Debugger Console pane's textbox, press "c" and then Enter to continue
    program execution.

View the output:

16. The program will perform the encryption, print the state (which appears in
    the I/O Console pane), and turn the emulated MSP430 CPU off.
